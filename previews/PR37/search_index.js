var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = TrixiAtmo","category":"page"},{"location":"#TrixiAtmo","page":"Home","title":"TrixiAtmo","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for TrixiAtmo.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [TrixiAtmo]","category":"page"},{"location":"#TrixiAtmo.TrixiAtmo","page":"Home","title":"TrixiAtmo.TrixiAtmo","text":"üåç TrixiAtmo üåç\n\nTrixiAtmo.jl is a simulation package for atmospheric models based on Trixi.jl\n\nSee also: trixi-framework/TrixiAtmo.jl\n\n\n\n\n\n","category":"module"},{"location":"#TrixiAtmo.AbstractCovariantEquations","page":"Home","title":"TrixiAtmo.AbstractCovariantEquations","text":"AbstractCovariantEquations{NDIMS, \n                           NDIMS_AMBIENT, \n                           NVARS} <: AbstractEquations{NDIMS, NVARS}\n\nAbstract type used to dispatch on systems of equations in covariant form, in which fluxes and prognostic variables are stored and computed in terms of their contravariant components  defining their expansions in terms of the local covariant tangent basis. The type parameter NDIMS denotes the dimension of the manifold on which the equations are solved, while NDIMS_AMBIENT is the dimension of the ambient space in which such a manifold is embedded. \n\nnote: Note\nComponents of vector-valued fields should be prescibed within the global coordinate  system (i.e. zonal and meridional components in the case of a spherical shell).  When dispatched on this type, the function Trixi.compute_coefficients! will  internally use the covariant_basis field of the container type  P4estElementContainerCovariant to obtain the local contravariant components used in the solver. \n\n\n\n\n\n","category":"type"},{"location":"#TrixiAtmo.CovariantLinearAdvectionEquation2D","page":"Home","title":"TrixiAtmo.CovariantLinearAdvectionEquation2D","text":"CovariantLinearAdvectionEquation2D <: AbstractCovariantEquations{2, 3, 3}\n\nA variable-coefficient linear advection equation can be defined on a two-dimensional manifold S subset mathbbR^3 as\n\npartial_t h + nabla_S cdot (h vecv) = 0\n\nWe treat this problem as a system of equations in which the first variable is the scalar conserved quantity h, and the second two are the contravariant components v^1 and v^2  used in the expansion \n\nvecv = v^1 veca_1 + v^2 veca_2\n\nwhich are spatially varying but remain constant in time (i.e. no flux or dissipation is  applied to such variables). The resulting system is then given on the reference element as \n\nJ fracpartialpartial tleftbeginarrayc h  v^1  v^2 endarrayright +\nfracpartialpartial xi^1 leftbeginarrayc J h v^1  0  0 endarrayright\n+ \nfracpartialpartial xi^2 leftbeginarrayc J h v^2  0  0 endarrayright \n= leftbeginarrayc 0  0  0 endarrayright\n\nwhere J is the area element (see the documentation for P4estElementContainerCovariant).\n\nnote: Note\nThe initial condition should be prescribed as h u v^mathrmT in terms of the  global velocity components u and v (i.e. zonal and meridional components in the  case of a spherical shell). The transformation to local contravariant components v^1  and v^2 is handled internally within Trixi.compute_coefficients!.\n\n\n\n\n\n","category":"type"},{"location":"#TrixiAtmo.P4estElementContainerCovariant","page":"Home","title":"TrixiAtmo.P4estElementContainerCovariant","text":"P4estElementContainerCovariant{NDIMS, RealT <: Real, uEltype <: Real,\n                               NDIMSP1, NDIMSP2,\n                               NDIMSP3, NDIMSP4} <: Trixi.AbstractContainer\n\nSpecialized element container for equations in covariant form on a manifold of dimension NDIMS, created when Trixi.init_elements is dispatched on  AbstractCovariantEquations{NDIMS, NDIMS_AMBIENT} and P4estMesh{NDIMS, NDIMS_AMBIENT. Contains the following geometric information:\n\nnode_coordinates::Array{RealT, NDIMSP2}: Cartesian components of the node positions within the ambient space of dimension NDIMS_AMBIENT, where the first index is the  Cartesian component index, the next NDIMS indices are tensor-product node indices (i,  j, for NDIMS = 2 or i, j, k, for NDIMS = 3), and the last is the element index.\ncovariant_basis::Array{RealT, NDIMSP3}: Components of the covariant tangent basis vectors  veca_m = partial vecX  partial xi^m expanded in terms of a global   tangent basis (i.e. zonal and meridional components in the case of a spherical shell),  where vecX denotes the mapping from the reference element to the physical element. he first index is the global component index l, the second index is the local component index m, the next NDIMS indices are tensor-product node indices (i, j,  for NDIMS = 2 or i, j, k, for NDIMS = 3), and the last is the element index.\ninverse_jacobian::Array{RealT, NDIMSP1}: Nodal values of 1J, where  J = sqrtmathrmdet(bmG), and bmG is the matrix of covariant metric tensor  components G_lm = veca_l cdot veca_m. The first NDIMS indices are  tensor-product node indices (i, j, for NDIMS = 2 or i, j, k, for  NDIMS = 3), and the last is the element index.\n\nwarning: Warning\nThe covariant solver currently only supports conforming meshes.\n\n\n\n\n\n","category":"type"},{"location":"#TrixiAtmo.P4estMeshCubedSphere2D-Tuple{Any, Any}","page":"Home","title":"TrixiAtmo.P4estMeshCubedSphere2D","text":"P4estMeshCubedSphere2D(trees_per_face_dimension, radius;\n                        polydeg, RealT=Float64,\n                        initial_refinement_level=0, unsaved_changes=true,\n                        p4est_partition_allow_for_coarsening=true,\n                        element_local_mapping=false)\n\nBuild a \"Cubed Sphere\" mesh as a 2D P4estMesh with 6 * trees_per_face_dimension^2 trees.\n\nThe mesh will have no boundaries.\n\nArguments\n\ntrees_per_face_dimension::Integer: the number of trees in the two local dimensions of                                      each face.\nradius::Integer: the radius of the sphere.\npolydeg::Integer: polynomial degree used to store the geometry of the mesh.                     The mapping will be approximated by an interpolation polynomial                     of the specified degree for each tree.\nRealT::Type: the type that should be used for coordinates.\ninitial_refinement_level::Integer: refine the mesh uniformly to this level before the simulation starts.\nunsaved_changes::Bool: if set to true, the mesh will be saved to a mesh file.\np4est_partition_allow_for_coarsening::Bool: Must be true when using AMR to make mesh adaptivity independent of domain partitioning. Should be false for static meshes to permit more fine-grained partitioning.\nelement_local_mapping::Bool: option to use the element-local mapping from Appendix A of Guba et al. (2014).\n\n\n\n\n\n","category":"method"},{"location":"#TrixiAtmo.examples_dir-Tuple{}","page":"Home","title":"TrixiAtmo.examples_dir","text":"examples_dir()\n\nReturn the directory where the example files provided with TrixiAtmo.jl are located. If TrixiAtmo.jl is installed as a regular package (with ]add Trixi), these files are read-only and should not be modified. To find out which files are available, use, e.g., readdir:\n\nExamples\n\nreaddir(examples_dir())\n\n\n\n\n\n","category":"method"}]
}
