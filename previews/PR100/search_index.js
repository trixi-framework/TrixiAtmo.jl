var documenterSearchIndex = {"docs":
[{"location":"code_of_conduct/#code-of-conduct","page":"Code of Conduct","title":"Code of Conduct","text":"","category":"section"},{"location":"code_of_conduct/","page":"Code of Conduct","title":"Code of Conduct","text":"Contributor Covenant Code of ConductOur PledgeWe as members, contributors, and leaders pledge to make participation in our community a harassment-free experience for everyone, regardless of age, body size, visible or invisible disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation.We pledge to act and interact in ways that contribute to an open, welcoming, diverse, inclusive, and healthy community.Our StandardsExamples of behavior that contributes to a positive environment for our community include:Demonstrating empathy and kindness toward other people\nBeing respectful of differing opinions, viewpoints, and experiences\nGiving and gracefully accepting constructive feedback\nAccepting responsibility and apologizing to those affected by our mistakes, and learning from the experience\nFocusing on what is best not just for us as individuals, but for the overall communityExamples of unacceptable behavior include:The use of sexualized language or imagery, and sexual attention or advances of any kind\nTrolling, insulting or derogatory comments, and personal or political attacks\nPublic or private harassment\nPublishing others' private information, such as a physical or email address, without their explicit permission\nOther conduct which could reasonably be considered inappropriate in a professional settingEnforcement ResponsibilitiesCommunity leaders are responsible for clarifying and enforcing our standards of acceptable behavior and will take appropriate and fair corrective action in response to any behavior that they deem inappropriate, threatening, offensive, or harmful.Community leaders have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, and will communicate reasons for moderation decisions when appropriate.ScopeThis Code of Conduct applies within all community spaces, and also applies when an individual is officially representing the community in public spaces. Examples of representing our community include using an official e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event.EnforcementInstances of abusive, harassing, or otherwise unacceptable behavior may be reported to the principal developers responsible for enforcement listed in Authors. All complaints will be reviewed and investigated promptly and fairly.All community leaders are obligated to respect the privacy and security of the reporter of any incident.Enforcement GuidelinesCommunity leaders will follow these Community Impact Guidelines in determining the consequences for any action they deem in violation of this Code of Conduct:1. CorrectionCommunity Impact: Use of inappropriate language or other behavior deemed unprofessional or unwelcome in the community.Consequence: A private, written warning from community leaders, providing clarity around the nature of the violation and an explanation of why the behavior was inappropriate. A public apology may be requested.2. WarningCommunity Impact: A violation through a single incident or series of actions.Consequence: A warning with consequences for continued behavior. No interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, for a specified period of time. This includes avoiding interactions in community spaces as well as external channels like social media. Violating these terms may lead to a temporary or permanent ban.3. Temporary BanCommunity Impact: A serious violation of community standards, including sustained inappropriate behavior.Consequence: A temporary ban from any sort of interaction or public communication with the community for a specified period of time. No public or private interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, is allowed during this period. Violating these terms may lead to a permanent ban.4. Permanent BanCommunity Impact: Demonstrating a pattern of violation of community standards, including sustained inappropriate behavior,  harassment of an individual, or aggression toward or disparagement of classes of individuals.Consequence: A permanent ban from any sort of public interaction within the community.AttributionThis Code of Conduct is adapted from the [Contributor Covenant][homepage], version 2.0, available at https://www.contributor-covenant.org/version/2/0/codeofconduct.html.Community Impact Guidelines were inspired by Mozilla's code of conduct enforcement ladder.[homepage]: https://www.contributor-covenant.orgFor answers to common questions about this code of conduct, see the FAQ at https://www.contributor-covenant.org/faq. Translations are available at https://www.contributor-covenant.org/translations.","category":"page"},{"location":"license/#License","page":"License","title":"License","text":"","category":"section"},{"location":"license/","page":"License","title":"License","text":"MIT LicenseCopyright (c) 2023-present The TrixiAtmo.jl Authors (see Authors)Permission is hereby granted, free of charge, to any person obtaining a copy   of this software and associated documentation files (the \"Software\"), to deal   in the Software without restriction, including without limitation the rights   to use, copy, modify, merge, publish, distribute, sublicense, and/or sell   copies of the Software, and to permit persons to whom the Software is   furnished to do so, subject to the following conditions:The above copyright notice and this permission notice shall be included in all   copies or substantial portions of the Software.THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR   IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,   FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE   AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER   LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,   OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE   SOFTWARE.","category":"page"},{"location":"contributing/#Contributing","page":"Contributing","title":"Contributing","text":"","category":"section"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"Since TrixiAtmo.jl is an open-source project, we are very happy to accept contributions from the community. To get in touch with the developers, join us on Slack or create an issue, or submit patches (preferably as pull requests) any time.","category":"page"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"TrixiAtmo.jl and its contributions are licensed under the MIT license (see License). As a contributor, you certify that all your contributions are in conformance with the Developer Certificate of Origin (Version 1.1), which is reproduced below.","category":"page"},{"location":"contributing/#Developer-Certificate-of-Origin-(Version-1.1)","page":"Contributing","title":"Developer Certificate of Origin (Version 1.1)","text":"","category":"section"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"The following text was taken from https://developercertificate.org:","category":"page"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"Developer Certificate of Origin\nVersion 1.1\n\nCopyright (C) 2004, 2006 The Linux Foundation and its contributors.\n1 Letterman Drive\nSuite D4700\nSan Francisco, CA, 94129\n\nEveryone is permitted to copy and distribute verbatim copies of this\nlicense document, but changing it is not allowed.\n\n\nDeveloper's Certificate of Origin 1.1\n\nBy making a contribution to this project, I certify that:\n\n(a) The contribution was created in whole or in part by me and I\n    have the right to submit it under the open source license\n    indicated in the file; or\n\n(b) The contribution is based upon previous work that, to the best\n    of my knowledge, is covered under an appropriate open source\n    license and I have the right under that license to submit that\n    work with modifications, whether created in whole or in part\n    by me, under the same open source license (unless I am\n    permitted to submit under a different license), as indicated\n    in the file; or\n\n(c) The contribution was provided directly to me by some other\n    person who certified (a), (b) or (c) and I have not modified\n    it.\n\n(d) I understand and agree that this project and the contribution\n    are public and that a record of the contribution (including all\n    personal information I submit with it, including my sign-off) is\n    maintained indefinitely and may be redistributed consistent with\n    this project or the open source license(s) involved.","category":"page"},{"location":"authors/#trixi_atmo_authors","page":"Authors","title":"Authors","text":"","category":"section"},{"location":"authors/","page":"Authors","title":"Authors","text":"The following people contributed major additions or modifications to TrixiAtmo.jl and are listed in alphabetical order. Together, they form \"The TrixiAtmo.jl Authors\" as mentioned in the License file.","category":"page"},{"location":"authors/","page":"Authors","title":"Authors","text":"Marco Artiano\nArpit Babbar\nBenedict Geihe\nFabian Höck\nOswald Knoth\nAndrés Rueda-Ramírez\nTristan Montoya\nHendrik Ranocha\nMichael Schlottke-Lakemper\nAndrew Winters","category":"page"},{"location":"reference/#TrixiAtmo.jl-API","page":"Reference","title":"TrixiAtmo.jl API","text":"","category":"section"},{"location":"reference/#TrixiAtmo.TrixiAtmo","page":"Reference","title":"TrixiAtmo.TrixiAtmo","text":"TrixiAtmo\n\nTrixiAtmo.jl is a simulation package for atmospheric models based on Trixi.jl\n\nSee also: trixi-framework/TrixiAtmo.jl\n\n\n\n\n\n","category":"module"},{"location":"reference/#TrixiAtmo.AbstractCovariantEquations","page":"Reference","title":"TrixiAtmo.AbstractCovariantEquations","text":"AbstractCovariantEquations{NDIMS, \n                           NDIMS_AMBIENT, \n                           GlobalCoordinateSystem,\n                           NVARS} <: AbstractEquations{NDIMS, NVARS}\n\nAbstract type used to dispatch on systems of equations in covariant form, in which fluxes and prognostic variables are stored and computed in terms of their contravariant components  defining their expansions in terms of the local covariant tangent basis. The type parameter NDIMS denotes the dimension of the manifold on which the equations are solved, while NDIMS_AMBIENT is the dimension of the ambient space in which such a manifold is embedded.  Some references on discontinuous Galerkin methods in covariant flux form are listed below:\n\nM. Baldauf (2020). Discontinuous Galerkin solver for the shallow-water equations in covariant form on the sphere and the ellipsoid. Journal of Computational Physics  410:109384. DOI: 10.1016/j.jcp.2020.109384 \nM. Baldauf (2021). A horizontally explicit, vertically implicit (HEVI) discontinuous Galerkin scheme for the 2-dimensional Euler and Navier-Stokes equations using  terrain-following coordinates. Journal of Computational Physics 446:110635. DOI: 10.1016/ j.jcp.2021.110635\nL. Bao, R. D. Nair, and H. M. Tufo (2014). A mass and momentum flux-form high-order discontinuous Galerkin shallow water model on the cubed-sphere. A mass and momentum  flux-form high-order discontinuous Galerkin shallow water model on the cubed-sphere.  Journal of Computational Physics 271:224-243.  DOI: 10.1016/j.jcp.2013.11.033\n\nWhen using this equation type, functions which are evaluated pointwise, such as fluxes,  source terms, and initial conditions take in the extra argument aux_vars, which contains  the geometric information needed for the covariant form. The type parameter  GlobalCoordinateSystem specifies the global coordinate system used to define the  covariant tangent basis, and may be either GlobalCartesianCoordinates or  GlobalSphericalCoordinates. The GlobalCoordinateSystem type parameter also  specifies the coordinate system with respect to which the initial condition should be  prescribed.\n\n\n\n\n\n","category":"type"},{"location":"reference/#TrixiAtmo.ChristoffelSymbolsAutodiff","page":"Reference","title":"TrixiAtmo.ChristoffelSymbolsAutodiff","text":"ChristoffelSymbolsAutodiff()\n\nStruct used for multiple dispatch on functions that compute the Christoffel symbols. This  option uses ForwardDiff.jl to compute\n\nGamma_jk^i =\nfrac12G^ilbig(partial_j G_kl + partial_k G_jl - partial_l G_jkbig)\n\nusing forward-mode automatic differentiation. \n\nwarning: Warning\nUsing this option with GlobalSphericalCoordinates is prone to NaN values as  a result of the polar singularity. This is remedied through the use of  GlobalCartesianCoordinates.\n\n\n\n\n\n","category":"type"},{"location":"reference/#TrixiAtmo.ChristoffelSymbolsCollocationDerivative","page":"Reference","title":"TrixiAtmo.ChristoffelSymbolsCollocationDerivative","text":"ChristoffelSymbolsCollocationDerivative()\n\nStruct used for multiple dispatch on functions that compute the Christoffel symbols.  Letting I^N denote the degree N polynomial interpolation operator collocated with the  scheme's quadrature nodes, this option computes the Christoffel symbols at each quadrature  node using the approximation\n\nGamma_jk^i approx\nfrac12G^ilbig(partial_j I^N G_kl + partial_k I^N G_jl - partial_l I^N G_jkbig)\n\n\n\n\n\n","category":"type"},{"location":"reference/#TrixiAtmo.CompressibleRainyEulerEquations2D","page":"Reference","title":"TrixiAtmo.CompressibleRainyEulerEquations2D","text":"CompressibleRainyEulerEquations2D{RealT <: Real} <:\n    AbstractCompressibleRainyEulerEquations{2, 9}\n\nThe compressible Euler equations in two dimensions with gravity and separate densities for dry air (rho_d), moist air (rho_m), and rain (\\rho_r).\n\nbeginalignat4\n    partial_t  (rho_d) + nabla cdot (rho_d v) =  0\n    partial_t  (rho_m) + nabla cdot (rho_m v) =  -S_r \n    partial_t  (rho_r) + nabla cdot (rho_r (v-v_r e_z)) =  S_r\n    partial_t(rho v) + nabla cdot (rho v otimes v - rho_r v_r votimes e_z + pcdottextrmId) =  -rho g e_z\n    partial_t (E) + nabla cdot ((E + p)v - (c_l T + 12 langle v vrangle) rho_r v_r e_z) = -rho g langle e_z vrangle\nendalignat\n\nHere, moist air is the sum of vapor (rho_v) and cloud water (rho_c), which are given implicitly by the nonlinear system\n\nbeginalign\n    (c_vd rho_d + c_vv rho_v + c_l rho_l)T + rho_v L_textrmref + 12rholangle v vrangle - E = 0\n    min left( frace_s(T)R_vT rho_mright) - rho_v =0\n    rho_m - rho_v - rho_c =0\nendalign\n\nwhere e_s(T) is the modeled saturation vapor pressure, v_r the modeled terminal rain, fall velocity, and S_r a modeled source term for rain conversion.\n\nReference\n\nS. Doppler et al. (2024). A discontinuous Galerkin approach for atmospheric flows with implicit condensation. Journal of Computational Physics. 499:112713. DOI: 10.1016/j.jcp.2023.112713\n\n\n\n\n\n","category":"type"},{"location":"reference/#TrixiAtmo.CovariantLinearAdvectionEquation2D","page":"Reference","title":"TrixiAtmo.CovariantLinearAdvectionEquation2D","text":"CovariantLinearAdvectionEquation2D{GlobalCoordinateSystem} <:  \n    AbstractCovariantEquations{2, 3, GlobalCoordinateSystem, 3}\n\nDenoting the covariant derivative by  nabla_j and summing over repeated indices, a variable-coefficient linear advection equation can be defined on a two-dimensional manifold in three-dimensional ambient space as\n\npartial_t h + nabla_j (hv^j) = 0\n\nWe treat this problem as a system of equations in which the first variable is the scalar  conserved quantity h, and the second two are the contravariant components v^1 and v^2  used in the expansion \n\nvecv = v^i veca_i =  v^1 veca_1 + v^2 veca_2\n\nwhere veca_1 = partial vecx  partial xi^1 and  veca_2 = partial vecx  partial xi^2 are the so-called covariant basis vectors,  and xi^1 and xi^2 are the local reference space coordinates. The velocity components  are spatially varying but assumed to be constant in time, so we do not apply any flux or  dissipation to such variables. The resulting system is then given on the reference element  as \n\nJ fracpartialpartial t\nleftbeginarrayc h  v^1  v^2 endarrayright \n+\nfracpartialpartial xi^1 \nleftbeginarrayc J h v^1  0  0 endarrayright\n+ \nfracpartialpartial xi^2 \nleftbeginarrayc J h v^2  0  0 endarrayright \n= \nleftbeginarrayc 0  0  0 endarrayright\n\nwhere J = lVertveca^1 times veca^2 rVert is the area element. Note that the  variable advection velocity components could alternatively be stored as auxiliary  variables, similarly to the geometric information.\n\n\n\n\n\n","category":"type"},{"location":"reference/#TrixiAtmo.CovariantShallowWaterEquations2D","page":"Reference","title":"TrixiAtmo.CovariantShallowWaterEquations2D","text":"CovariantShallowWaterEquations2D{GlobalCoordinateSystem} <:  \n    AbstractCovariantEquations{2, 3, GlobalCoordinateSystem, 3}\n\nDenoting the covariant derivative by  nabla_j and summing over repeated indices, the shallow water equations can be expressed  on a two-dimensional surface in three-dimensional ambient space as\n\nbeginaligned\npartial_t h + nabla_j (hv^j) = 0\npartial_t (hv^i) + nabla_j tau^ij + gh G^ijpartial_j b\n= -fJ G^ijvarepsilon_jk hv^k\nendaligned\n\nwhere h is the geopotential height (equal to the total geopotential height H for zero bottom topography), v^i and G^ij are the contravariant velocity and metric tensor components, g is the gravitational acceleration, b is the bottom topography, f is the  Coriolis parameter, J is the area element, varepsilon is the Levi-Civita symbol, and  partial_j is used as a shorthand for partial  partial xi^j. The contravariant  momentum flux tensor components are given by\n\ntau^ij = hv^i v^j + frac12G^ijgh^2\n\nThe covariant shallow water equations with constant bottom topography can be formulated on  the reference element as a system of conservation laws with a source term (implemented in  the exported function source_terms_geometric_coriolis), as given by\n\nJ fracpartialpartial t\nleftbeginarrayc h  hv^1  hv^2 endarrayright \n+\nfracpartialpartial xi^1 \nleftbeginarrayc J h v^1  J tau^11  J tau^12 endarrayright\n+ \nfracpartialpartial xi^2 \nleftbeginarrayc J h v^2  J tau^21  J tau^22  endarrayright \n= J leftbeginarrayc 0  \n-Gamma^1_jktau^jk - f J big(G^12hv^1 - G^11hv^2big)  \n-Gamma^2_jktau^jk - f J big(G^22hv^1 - G^21hv^2big)\n endarrayright\n\nNote that the geometric contribution to the source term involves the Christoffel symbols of the second kind, which can been expressed in terms of the covariant metric tensor  components G_ij as \n\nGamma_jk^i = \nfrac12G^ilbig(partial_j G_kl + partial_k G_jl - partial_l G_jkbig)\n\nReferences\n\nM. Baldauf (2020). Discontinuous Galerkin solver for the shallow-water equations in covariant form on the sphere and the ellipsoid. Journal of Computational Physics  410:109384. DOI: 10.1016/j.jcp.2020.109384 \nL. Bao, R. D. Nair, and H. M. Tufo (2014). A mass and momentum flux-form high-order discontinuous Galerkin shallow water model on the cubed-sphere. A mass and momentum  flux-form high-order discontinuous Galerkin shallow water model on the cubed-sphere.  Journal of Computational Physics 271:224-243.  DOI: 10.1016/j.jcp.2013.11.033\n\nnote: Note\nWhen solving problems with variable bottom topography as well as when using entropy-stable schemes, SplitCovariantShallowWaterEquations2D should be used instead.\n\n\n\n\n\n","category":"type"},{"location":"reference/#TrixiAtmo.GlobalCartesianCoordinates","page":"Reference","title":"TrixiAtmo.GlobalCartesianCoordinates","text":"GlobalCartesianCoordinates()\n\nStruct used for dispatch, specifying that the covariant tangent basis vectors should be  defined with respect to a global Cartesian coordinate system.\n\n\n\n\n\n","category":"type"},{"location":"reference/#TrixiAtmo.GlobalSphericalCoordinates","page":"Reference","title":"TrixiAtmo.GlobalSphericalCoordinates","text":"GlobalSphericalCoordinates()\n\nStruct used for dispatch, specifying that the covariant tangent basis vectors should be  defined with respect to a global spherical coordinate system.\n\n\n\n\n\n","category":"type"},{"location":"reference/#TrixiAtmo.MetricTermsCovariantSphere","page":"Reference","title":"TrixiAtmo.MetricTermsCovariantSphere","text":"MetricTermsCovariantSphere(christoffel_symbols = ChristoffelSymbolsAutodiff())\n\nStruct specifying options for computing geometric information for discretizations in  covariant form based on an exact representation of the spherical geometry.  Currently, the  only field is christoffel_symbols, specifying the approach used to compute the  Christoffel symbols, for which the options are ChristoffelSymbolsAutodiff or  ChristoffelSymbolsCollocationDerivative. \n\n\n\n\n\n","category":"type"},{"location":"reference/#TrixiAtmo.MetricTermsCrossProduct","page":"Reference","title":"TrixiAtmo.MetricTermsCrossProduct","text":"MetricTermsCrossProduct()\n\nStruct used for multiple dispatch on functions that compute the metric terms. When the argument metric_terms is of type MetricTermsCrossProduct, the  contravariant vectors are computed using the cross-product form.\n\n\n\n\n\n","category":"type"},{"location":"reference/#TrixiAtmo.MetricTermsInvariantCurl","page":"Reference","title":"TrixiAtmo.MetricTermsInvariantCurl","text":"MetricTermsInvariantCurl()\n\nStruct used for multiple dispatch on functions that compute the metric terms. When the argument metric_terms is of type MetricTermsInvariantCurl, the  contravariant vectors are computed using the invariant curl form.\n\nReferences\n\nKopriva, D. A. (2006). Metric identities and the discontinuous spectral element method on  curvilinear meshes. Journal of Scientific Computing 26, 301-327.  DOI: 10.1007/s10915-005-9070-8\nVinokur, M. and Yee, H. C. (2001). Extension of efficient low dissipation high order schemes for 3-D curvilinear moving grids. In Caughey, D. A., and Hafez, M. M. (eds.), Frontiers of Computational Fluid Dynamics 2002, World Scientific, Singapore, pp. 129–164. DOI: 10.1142/9789812810793_0008\n\n\n\n\n\n","category":"type"},{"location":"reference/#TrixiAtmo.NonlinearSolveDG","page":"Reference","title":"TrixiAtmo.NonlinearSolveDG","text":"NonlinearSolveDG\n\nNewton method, which can be called in every stage via callbacks.\n\nParameters\n\nresidual::Function: function evaluating the residual\njacobian::Function: function evaluating the Jacobian of the residual\nvariables_index_vector::Vector{Int64}: vector of indices of entries of the solution vector the Newton method operates on\ntolerance::Real: tolerance for termination of the Newton method\nmax_iterations::Int64: maximal number of iterations of the Newton method\n\n\n\n\n\n","category":"type"},{"location":"reference/#TrixiAtmo.ShallowWaterEquations3D","page":"Reference","title":"TrixiAtmo.ShallowWaterEquations3D","text":"ShallowWaterEquations3D(; gravity, rotation_rate = 0, H0 = 0)\n\nRotating shallow water equations (SWE) in three space dimensions to be solved on curved manifolds (e.g., on a spherical shell).  The equations are given by\n\nbeginaligned\n  fracpartial hpartial t + fracpartialpartial x(h v_1)\n    + fracpartialpartial y(h v_2) + fracpartialpartial z(h v_3) = s_h \n    fracpartialpartial t(h v_1) + fracpartialpartial xleft(h v_1^2 + fracg2h^2right)\n    + fracpartialpartial y(h v_1 v_2) + fracpartialpartial z(h v_1 v_3) g h fracpartial bpartial x = s_hv_1 \n    fracpartialpartial t(h v_2) + fracpartialpartial x(h v_1 v_2)\n    + fracpartialpartial yleft(h v_2^2 + fracg2h^2right) + fracpartialpartial z(h v_2 v_3) + g h fracpartial bpartial y = s_hv_2 \n    fracpartialpartial t(h v_3) + fracpartialpartial x(h v_1 v_3)\n    + fracpartialpartial y(h v_2 v_3) + fracpartialpartial zleft(h v_3^2 + fracg2h^2right) + g h fracpartial bpartial z= s_hv_3\nendaligned\n\nThe unknown quantities of the SWE are the water height h and the velocities mathbfv = (v_1 v_2 v_3)^T. The gravitational acceleration is denoted by g.\n\nThe 3D Shallow Water Equations (SWE) extend the 2D SWE to model shallow water flows on 2D manifolds embedded within 3D space.  To confine the flow to the 2D manifold, a source term incorporating a Lagrange multiplier is applied to the momentum equations using the function source_terms_lagrange_multiplier.  This term effectively removes momentum components that are normal to the manifold, ensuring the flow remains  constrained within the 2D surface.\n\nTo incorporate the effect of the rotation of the manifold, use the function source_terms_coriolis, which adds the necessary Coriolis source terms to the momentum equations assuming a rotation around the z axis with a rotation rate in radians per time unit given by rotation_rate. To incorporate both Coriolis forces and the Lagrange multiplier terms, use source_terms_coriolis_lagrange_multiplier.\n\nThe additional quantity H_0 is also available to store a reference value for the total water height that is useful to set initial conditions or test the \"lake-at-rest\" well-balancedness.\n\nIn addition to the unknowns, TrixiAtmo.jl currently stores the bottom topography values at the approximation points despite being fixed in time. This is done for convenience of computing the bottom topography gradients on the fly during the approximation as well as computing auxiliary quantities like the total water height H or the entropy variables. This affects the implementation and use of these equations in various ways:\n\nThe flux values corresponding to the bottom topography must be zero.\nThe bottom topography values must be included when defining initial conditions, boundary conditions or source terms.\nAnalysisCallback analyzes this variable.\nTrixi.jl's visualization tools will visualize the bottom topography by default.\n\nReferences:\n\nJ. Coté (1988). \"A Lagrange multiplier approach for the metric terms of semi-Lagrangian models on the sphere\".  Quarterly Journal of the Royal Meteorological Society 114, 1347-1352. DOI: 10.1002/qj.49711448310\nF. X. Giraldo (2001). \"A spectral element shallow water model on spherical geodesic grids\".  DOI: 10.1002/1097-0363(20010430)35:8<869::AID-FLD116>3.0.CO;2-S\n\n\n\n\n\n","category":"type"},{"location":"reference/#TrixiAtmo.SplitCovariantShallowWaterEquations2D","page":"Reference","title":"TrixiAtmo.SplitCovariantShallowWaterEquations2D","text":"SplitCovariantShallowWaterEquations2D{GlobalCoordinateSystem} <:  \n    AbstractCovariantEquations{2, 3, GlobalCoordinateSystem, 3}\n\nAlternative flux formulation of CovariantShallowWaterEquations2D given on the  reference element by \n\nJ fracpartialpartial t\nleftbeginarrayc h  hv^1  hv^2 endarrayright \n+\nfracpartialpartial xi^1 \nleftbeginarrayc J h v^1  J h v^1 v^1  J h v^2 v^1 endarrayright\n+ \nfracpartialpartial xi^2 \nleftbeginarrayc J h v^2  J h v^1 v^2  J h v^2 v^2 endarrayright \n+\nJ leftbeginarrayc 0  Upsilon^1  Upsilon^2 endarrayright \n= \nJleftbeginarrayc0  s^1  s^2 endarrayright\n\nIn the above, the non-conservative differential terms in the momentum equations are given by\n\nUpsilon^i = frac12hv^jbig(G^ikpartial_j v_k - partial_j v^ibig) \n+ ghG^ijpartial_j (h + b)\n\nwhere we allow for a variable bottom topography defined by h_s, and the algebraic  momentum source terms implemented in source_terms_geometric_coriolis are given by\n\ns^i = -frac12big(Gamma_jk^i hv^j v^k - G^ikGamma_jk^lh v^j v_l big) \n- f JG^ijvarepsilon_jk hv^k\n\nIn the above, we employ the same notation as in CovariantShallowWaterEquations2D  (including summation over repeated indices) and note that the covariant velocity components are given by v_i = G_ij v^j. To obtain an entropy-conservative scheme with respect to  the total energy\n\neta = frac12h(v_1 v^1 + v_2v^2)  + frac12gh^2 + ghb\n\nthis equation type should be used with volume_flux = (flux_ec, flux_nonconservative_ec).\n\nwarning: Experimental implementation\nThe use of entropy-stable split-form/flux-differencing formulations for covariant  equations is an experimental feature and may change in future releases.\n\n\n\n\n\n","category":"type"},{"location":"reference/#Trixi.flux_ec-Tuple{Any, Any, AbstractVector, CompressibleEulerPotentialTemperatureEquations2D}","page":"Reference","title":"Trixi.flux_ec","text":"flux_ec(u_ll, u_rr, orientation_or_normal_direction, equations::CompressibleEulerEquationsPotentialTemperature2D)\n\nEntropy conservative two-point flux by\n\nMarco Artiano, Oswald Knoth, Peter Spichtinger, Hendrik Ranocha (2025)  Structure-Preserving High-Order Methods for the Compressible Euler Equations   in Potential Temperature Formulation for Atmospheric Flows  (https://arxiv.org/abs/2509.10311)\n\n\n\n\n\n","category":"method"},{"location":"reference/#Trixi.flux_ec-Tuple{Any, Any, AbstractVector, CompressibleEulerPotentialTemperatureEquations3D}","page":"Reference","title":"Trixi.flux_ec","text":"flux_ec(u_ll, u_rr, orientation_or_normal_direction, equations::CompressibleEulerEquationsPotentialTemperature3D)\n\nEntropy conservative two-point flux by\n\nMarco Artiano, Oswald Knoth, Peter Spichtinger, Hendrik Ranocha (2025)  Structure-Preserving High-Order Methods for the Compressible Euler Equations   in Potential Temperature Formulation for Atmospheric Flows  (https://arxiv.org/abs/2509.10311)\n\n\n\n\n\n","category":"method"},{"location":"reference/#Trixi.flux_ec-Tuple{Any, Any, AbstractVector, CompressibleEulerPotentialTemperatureEquationsWithGravity2D}","page":"Reference","title":"Trixi.flux_ec","text":"flux_ec(u_ll, u_rr, orientation_or_normal_direction, equations::CompressibleEulerEquationsPotentialTemperatureWithGravity2D)\n\nEntropy conservative two-point flux by\n\nMarco Artiano, Oswald Knoth, Peter Spichtinger, Hendrik Ranocha (2025)  Structure-Preserving High-Order Methods for the Compressible Euler Equations   in Potential Temperature Formulation for Atmospheric Flows  (https://arxiv.org/abs/2509.10311)\n\n\n\n\n\n","category":"method"},{"location":"reference/#Trixi.flux_ec-Tuple{Any, Any, AbstractVector, CompressibleEulerPotentialTemperatureEquationsWithGravity3D}","page":"Reference","title":"Trixi.flux_ec","text":"flux_ec(u_ll, u_rr, orientation_or_normal_direction, equations::CompressibleEulerEquationsPotentialTemperatureWithGravity3D)\n\nEntropy conservative two-point flux by\n\nMarco Artiano, Oswald Knoth, Peter Spichtinger, Hendrik Ranocha (2025)  Structure-Preserving High-Order Methods for the Compressible Euler Equations   in Potential Temperature Formulation for Atmospheric Flows  (https://arxiv.org/abs/2509.10311)\n\n\n\n\n\n","category":"method"},{"location":"reference/#Trixi.flux_ec-Tuple{Any, Any, Any, Any, Integer, SplitCovariantShallowWaterEquations2D}","page":"Reference","title":"Trixi.flux_ec","text":"flux_ec(u_ll, u_rr, aux_vars_ll, aux_vars_rr,\n                           orientation::Integer,\n                           equations::SplitCovariantShallowWaterEquations2D)\n\nSymmetric part of an entropy-conservative flux for the shallow water equations in covariant  form. Note that this does not include the pressure term or the non-symmetric curvature  correction term. When used with flux_nonconservative_ec for the nonconservative volume and surface terms, this flux recovers the formulation described in the following  paper for the special case of the Euclidean metric G_ab = delta_ab:\n\nN. Wintermeyer, A. R. Winters, G. J. Gassner, and D. A. Kopriva (2017). An entropy stable nodal discontinuous Galerkin method for the two dimensional shallow water equations on  unstructured curvilinear meshes with discontinuous bathymetry. Journal of Computational  Physics 300:240-242.  DOI: 10.1016/j.jcp.2017.03.036\n\nwarning: Experimental implementation\nThe use of entropy-stable split-form/flux-differencing formulations for covariant  equations is an experimental feature and may change in future releases.\n\n\n\n\n\n","category":"method"},{"location":"reference/#Trixi.flux_ec-Tuple{Any, Any, Integer, CompressibleEulerPotentialTemperatureEquations1D}","page":"Reference","title":"Trixi.flux_ec","text":"flux_ec(u_ll, u_rr, orientation_or_normal_direction, equations::CompressibleEulerEquationsPotentialTemperature1D)\n\nEntropy conservative two-point flux by\n\nMarco Artiano, Oswald Knoth, Peter Spichtinger, Hendrik Ranocha (2025)  Structure-Preserving High-Order Methods for the Compressible Euler Equations   in Potential Temperature Formulation for Atmospheric Flows  (https://arxiv.org/abs/2509.10311)\n\n\n\n\n\n","category":"method"},{"location":"reference/#Trixi.flux_ec-Tuple{Any, Any, Integer, CompressibleEulerPotentialTemperatureEquationsWithGravity1D}","page":"Reference","title":"Trixi.flux_ec","text":"flux_ec(u_ll, u_rr, orientation_or_normal_direction, equations::CompressibleEulerEquationsPotentialTemperatureWithGravity1D)\n\nEntropy conservative two-point flux by\n\nMarco Artiano, Oswald Knoth, Peter Spichtinger, Hendrik Ranocha (2025)  Structure-Preserving High-Order Methods for the Compressible Euler Equations   in Potential Temperature Formulation for Atmospheric Flows  (https://arxiv.org/abs/2509.10311)\n\n\n\n\n\n","category":"method"},{"location":"reference/#Trixi.flux_fjordholm_etal-Tuple{Any, Any, AbstractVector, ShallowWaterEquations3D}","page":"Reference","title":"Trixi.flux_fjordholm_etal","text":"flux_fjordholm_etal(u_ll, u_rr,\n                    normal_direction::AbstractVector,\n                    equations::ShallowWaterEquations3D)\n\nTotal energy conservative (mathematical entropy for shallow water equations). When the bottom topography is nonzero this should only be used as a surface flux otherwise the scheme will not be well-balanced. For well-balancedness in the volume flux use flux_wintermeyer_etal.\n\nDetails are available in Eq. (4.1) in the paper:\n\nUlrik S. Fjordholm, Siddhartha Mishra and Eitan Tadmor (2011) Well-balanced and energy stable schemes for the shallow water equations with discontinuous topography DOI: 10.1016/j.jcp.2011.03.042\n\n\n\n\n\n","category":"method"},{"location":"reference/#Trixi.flux_nonconservative_fjordholm_etal-Tuple{Any, Any, AbstractVector, ShallowWaterEquations3D}","page":"Reference","title":"Trixi.flux_nonconservative_fjordholm_etal","text":"flux_nonconservative_fjordholm_etal(u_ll, u_rr, orientation::Integer,\n                                    equations::ShallowWaterEquations3D)\nflux_nonconservative_fjordholm_etal(u_ll, u_rr,\n                                    normal_direction::AbstractVector,\n                                    equations::ShallowWaterEquations3D)\n\nNon-symmetric two-point surface flux discretizing the nonconservative (source) term of that contains the gradient of the bottom topography ShallowWaterEquations3D.\n\nThis flux can be used together with flux_fjordholm_etal at interfaces to ensure entropy conservation and well-balancedness.\n\nFurther details for the original finite volume formulation are available in\n\nUlrik S. Fjordholm, Siddhartha Mishra and Eitan Tadmor (2011) Well-balanced and energy stable schemes for the shallow water equations with discontinuous topography DOI: 10.1016/j.jcp.2011.03.042\n\nand for curvilinear 2D case in the paper:\n\nNiklas Wintermeyer, Andrew R. Winters, Gregor J. Gassner and David A. Kopriva (2017) An entropy stable nodal discontinuous Galerkin method for the two dimensional shallow water equations on unstructured curvilinear meshes with discontinuous bathymetry DOI: 10.1016/j.jcp.2017.03.036\n\n\n\n\n\n","category":"method"},{"location":"reference/#Trixi.flux_nonconservative_wintermeyer_etal-Tuple{Any, Any, AbstractVector, ShallowWaterEquations3D}","page":"Reference","title":"Trixi.flux_nonconservative_wintermeyer_etal","text":"flux_nonconservative_wintermeyer_etal(u_ll, u_rr, orientation::Integer,\n                                      equations::ShallowWaterEquations3D)\nflux_nonconservative_wintermeyer_etal(u_ll, u_rr,\n                                      normal_direction::AbstractVector,\n                                      equations::ShallowWaterEquations3D)\n\nNon-symmetric two-point volume flux discretizing the nonconservative (source) term that contains the gradient of the bottom topography ShallowWaterEquations3D.\n\nFor the surface_flux either flux_wintermeyer_etal or flux_fjordholm_etal can be used to ensure well-balancedness and entropy conservation.\n\nFurther details are available in the papers:\n\nNiklas Wintermeyer, Andrew R. Winters, Gregor J. Gassner and David A. Kopriva (2017) An entropy stable nodal discontinuous Galerkin method for the two dimensional shallow water equations on unstructured curvilinear meshes with discontinuous bathymetry DOI: 10.1016/j.jcp.2017.03.036\nPatrick Ersing, Andrew R. Winters (2023) An entropy stable discontinuous Galerkin method for the two-layer shallow water equations on curvilinear meshes DOI: 10.48550/arXiv.2306.12699\n\n\n\n\n\n","category":"method"},{"location":"reference/#Trixi.flux_wintermeyer_etal-Tuple{Any, Any, AbstractVector, ShallowWaterEquations3D}","page":"Reference","title":"Trixi.flux_wintermeyer_etal","text":"flux_wintermeyer_etal(u_ll, u_rr,\n                      normal_direction::AbstractVector,\n                      equations::ShallowWaterEquations3D)\n\nTotal energy conservative (mathematical entropy for shallow water equations) split form. When the bottom topography is nonzero this scheme will be well-balanced when used as a volume_flux. For the surface_flux either flux_wintermeyer_etal or flux_fjordholm_etal can be used to ensure well-balancedness and entropy conservation.\n\nFurther details are available in Theorem 1 of the paper:\n\nNiklas Wintermeyer, Andrew R. Winters, Gregor J. Gassner and David A. Kopriva (2017) An entropy stable nodal discontinuous Galerkin method for the two dimensional shallow water equations on unstructured curvilinear meshes with discontinuous bathymetry DOI: 10.1016/j.jcp.2017.03.036\n\n\n\n\n\n","category":"method"},{"location":"reference/#TrixiAtmo.P4estMeshCubedSphere2D-Tuple{Any, Any}","page":"Reference","title":"TrixiAtmo.P4estMeshCubedSphere2D","text":"P4estMeshCubedSphere2D(trees_per_face_dimension, radius;\n                        polydeg, RealT=Float64,\n                        initial_refinement_level=0, unsaved_changes=true,\n                        p4est_partition_allow_for_coarsening=true,\n                        element_local_mapping=false)\n\nBuild a \"Cubed Sphere\" mesh as a 2D P4estMesh with 6 * trees_per_face_dimension^2 trees.\n\nThe mesh will have no boundaries.\n\nArguments\n\ntrees_per_face_dimension::Integer: the number of trees in the two local dimensions of                                      each face.\nradius::Integer: the radius of the sphere.\npolydeg::Integer: polynomial degree used to store the geometry of the mesh.                     The mapping will be approximated by an interpolation polynomial                     of the specified degree for each tree.\nRealT::Type: the type that should be used for coordinates.\ninitial_refinement_level::Integer: refine the mesh uniformly to this level before the simulation starts.\nunsaved_changes::Bool: if set to true, the mesh will be saved to a mesh file.\np4est_partition_allow_for_coarsening::Bool: Must be true when using AMR to make mesh adaptivity independent of domain partitioning. Should be false for static meshes to permit more fine-grained partitioning.\nelement_local_mapping::Bool: option to use the alternative element-local mapping from Appendix A of Guba et al. (2014). If set to  true, the four corner vertex positions for each element will be obtained through an  equiangular gnomonic projection (Ronchi et al. 1996), and the tree node coordinates within the element (i.e. the field  tree_node_coordinates) will be obtained by first using a bilinear mapping based on the  four corner vertices, and then projecting the bilinearly mapped nodes onto the spherical  surface by normalizing the resulting Cartesian coordinates and scaling by  radius. If  set to false, the equiangular gnomonic projection will be used for all tree node  coordinates.\n\nwarning: Warning\nAdaptivity and MPI parallelization are not yet supported for equations in covariant  form, and we require initial_refinement_level = 0 for such cases. Furthermore, the  calculation of the metric terms for the covariant form currently requires polydeg to  be equal to the polynomial degree of the solver, and element_local_mapping = true.\n\n\n\n\n\n","category":"method"},{"location":"reference/#TrixiAtmo.P4estMeshQuadIcosahedron2D-Tuple{Any, Any}","page":"Reference","title":"TrixiAtmo.P4estMeshQuadIcosahedron2D","text":"P4estMeshQuadIcosahedron2D(trees_per_face_dimension, radius;\n                           polydeg, RealT=Float64,\n                           initial_refinement_level=0, unsaved_changes=true,\n                           p4est_partition_allow_for_coarsening=true)\n\nBuild a quad-based icosahedral mesh as a 2D P4estMesh with 60 * trees_per_face_dimension^2 trees (20 triangular faces of the icosahedron, each subdivided into 3 parent quads, each of which subdivided into trees_per_face_dimension^2 trees).\n\nThe node coordinates of the trees will be obtained using the element-local mapping from Appendix A of Guba et al. (2014).  See P4estMeshCubedSphere2D for more information about the element-local mapping.\n\nThe mesh will have no boundaries.\n\nArguments\n\ntrees_per_face_dimension::Integer: the number of trees in the two local dimensions of                                      each parent quad.\nradius::Integer: the radius of the sphere.\npolydeg::Integer: polynomial degree used to store the geometry of the mesh.                     The mapping will be approximated by an interpolation polynomial                     of the specified degree for each tree.\nRealT::Type: the type that should be used for coordinates.\ninitial_refinement_level::Integer: refine the mesh uniformly to this level before the simulation starts.\nunsaved_changes::Bool: if set to true, the mesh will be saved to a mesh file.\np4est_partition_allow_for_coarsening::Bool: Must be true when using AMR to make mesh adaptivity independent of domain partitioning. Should be false for static meshes to permit more fine-grained partitioning.\n\nwarning: Warning\nAdaptivity and MPI parallelization are not yet supported for equations in covariant  form, and we require initial_refinement_level = 0 for such cases. Furthermore, the  calculation of the metric terms for the covariant form currently requires polydeg to  be equal to the polynomial degree of the solver.\n\n\n\n\n\n","category":"method"},{"location":"reference/#TrixiAtmo.clean_solution_lagrange_multiplier!-Tuple{Any, ShallowWaterEquations3D, Any}","page":"Reference","title":"TrixiAtmo.clean_solution_lagrange_multiplier!","text":"     clean_solution_lagrange_multiplier!(u, equations::ShallowWaterEquations3D, normal_direction)\n\nFunction to apply Lagrange multiplier discretely to the solution in order to constrain  the momentum to a 2D manifold.\n\nThe vector normal_direction is perpendicular to the 2D manifold. By default,  it is the normal contravariant basis vector.\n\n\n\n\n\n","category":"method"},{"location":"reference/#TrixiAtmo.contravariant2global","page":"Reference","title":"TrixiAtmo.contravariant2global","text":"contravariant2global(u, aux_vars, equations)\n\nTransform the vector u of solution variables with the momentum or velocity given in terms  of local contravariant components into the global coordinate system specified by the  GlobalCoordinateSystem type parameter in AbstractCovariantEquations. u is a  vector type of the correct length nvariables(equations). Notice the function doesn't  include any error checks for the purpose of efficiency, so please make sure your input is  correct. The inverse conversion is performed by global2contravariant.\n\n\n\n\n\n","category":"function"},{"location":"reference/#TrixiAtmo.examples_dir-Tuple{}","page":"Reference","title":"TrixiAtmo.examples_dir","text":"examples_dir()\n\nReturn the directory where the example files provided with TrixiAtmo.jl are located. If TrixiAtmo.jl is installed as a regular package (with ]add Trixi), these files are read-only and should not be modified. To find out which files are available, use, e.g., readdir:\n\nExamples\n\nreaddir(examples_dir())\n\n\n\n\n\n","category":"method"},{"location":"reference/#TrixiAtmo.flux_ec_rain-Tuple{Any, Any, AbstractVector, CompressibleRainyEulerEquations2D}","page":"Reference","title":"TrixiAtmo.flux_ec_rain","text":"flux_ec_rain(u_ll, u_rr, orientation_or_normal_direction,\n             equations::CompressibleRainyEulerEquations2D)\n\nEntropy-conserving flux including rain, derived in: Fabian Höck A Discontinuous Galerkin Method for Moist Atmospheric Dynamics with Rain Master's thesis, University of Cologne, 2025\n\n\n\n\n\n","category":"method"},{"location":"reference/#TrixiAtmo.flux_etec-Tuple{Any, Any, AbstractVector, CompressibleEulerPotentialTemperatureEquations2D}","page":"Reference","title":"TrixiAtmo.flux_etec","text":"flux_etec(u_ll, u_rr, orientation_or_normal_direction, equations::CompressibleEulerEquationsPotentialTemperature2D)\n\nEntropy and total energy conservative two-point flux by\n\nMarco Artiano, Oswald Knoth, Peter Spichtinger, Hendrik Ranocha (2025)  Structure-Preserving High-Order Methods for the Compressible Euler Equations   in Potential Temperature Formulation for Atmospheric Flows  (https://arxiv.org/abs/2509.10311)\n\n\n\n\n\n","category":"method"},{"location":"reference/#TrixiAtmo.flux_etec-Tuple{Any, Any, AbstractVector, CompressibleEulerPotentialTemperatureEquations3D}","page":"Reference","title":"TrixiAtmo.flux_etec","text":"flux_etec(u_ll, u_rr, orientation_or_normal_direction, equations::CompressibleEulerEquationsPotentialTemperature3D)\n\nEntropy and total energy conservative two-point flux by\n\nMarco Artiano, Oswald Knoth, Peter Spichtinger, Hendrik Ranocha (2025)  Structure-Preserving High-Order Methods for the Compressible Euler Equations   in Potential Temperature Formulation for Atmospheric Flows  (https://arxiv.org/abs/2509.10311)\n\n\n\n\n\n","category":"method"},{"location":"reference/#TrixiAtmo.flux_etec-Tuple{Any, Any, AbstractVector, CompressibleEulerPotentialTemperatureEquationsWithGravity2D}","page":"Reference","title":"TrixiAtmo.flux_etec","text":"flux_etec(u_ll, u_rr, orientation_or_normal_direction, equations::CompressibleEulerEquationsPotentialTemperatureWithGravity2D)\n\nEntropy and total energy conservative two-point flux by\n\nMarco Artiano, Oswald Knoth, Peter Spichtinger, Hendrik Ranocha (2025)  Structure-Preserving High-Order Methods for the Compressible Euler Equations   in Potential Temperature Formulation for Atmospheric Flows  (https://arxiv.org/abs/2509.10311)\n\n\n\n\n\n","category":"method"},{"location":"reference/#TrixiAtmo.flux_etec-Tuple{Any, Any, AbstractVector, CompressibleEulerPotentialTemperatureEquationsWithGravity3D}","page":"Reference","title":"TrixiAtmo.flux_etec","text":"flux_etec(u_ll, u_rr, orientation_or_normal_direction, equations::CompressibleEulerEquationsPotentialTemperatureWithGravity3D)\n\nEntropy and total energy conservative two-point flux by\n\nMarco Artiano, Oswald Knoth, Peter Spichtinger, Hendrik Ranocha (2025)  Structure-Preserving High-Order Methods for the Compressible Euler Equations   in Potential Temperature Formulation for Atmospheric Flows  (https://arxiv.org/abs/2509.10311)\n\n\n\n\n\n","category":"method"},{"location":"reference/#TrixiAtmo.flux_etec-Tuple{Any, Any, Integer, CompressibleEulerPotentialTemperatureEquations1D}","page":"Reference","title":"TrixiAtmo.flux_etec","text":"flux_etec(u_ll, u_rr, orientation_or_normal_direction, equations::CompressibleEulerEquationsPotentialTemperature1D)\n\nEntropy and total energy conservative two-point flux by\n\nMarco Artiano, Oswald Knoth, Peter Spichtinger, Hendrik Ranocha (2025)  Structure-Preserving High-Order Methods for the Compressible Euler Equations   in Potential Temperature Formulation for Atmospheric Flows  (https://arxiv.org/abs/2509.10311)\n\n\n\n\n\n","category":"method"},{"location":"reference/#TrixiAtmo.flux_etec-Tuple{Any, Any, Integer, CompressibleEulerPotentialTemperatureEquationsWithGravity1D}","page":"Reference","title":"TrixiAtmo.flux_etec","text":"flux_etec(u_ll, u_rr, orientation_or_normal_direction, equations::CompressibleEulerEquationsPotentialTemperatureWithGravity1D)\n\nEntropy and total energy conservative two-point flux by\n\nMarco Artiano, Oswald Knoth, Peter Spichtinger, Hendrik Ranocha (2025)  Structure-Preserving High-Order Methods for the Compressible Euler Equations   in Potential Temperature Formulation for Atmospheric Flows  (https://arxiv.org/abs/2509.10311)\n\n\n\n\n\n","category":"method"},{"location":"reference/#TrixiAtmo.flux_nonconservative_artiano_etal-Tuple{Any, Any, AbstractVector, CompressibleEulerPotentialTemperatureEquationsWithGravity2D}","page":"Reference","title":"TrixiAtmo.flux_nonconservative_artiano_etal","text":"flux_nonconservative_artiano_etal(u_ll, u_rr, normal_direction::AbstractVector, equations::CompressibleEulerPotentialTemperatureEquationsWithGravity2D)\n\nWell-balanced gravity term for constant potential temperature background state by\n\nMarco Artiano, Oswald Knoth, Peter Spichtinger, Hendrik Ranocha (2025)  Structure-Preserving High-Order Methods for the Compressible Euler Equations   in Potential Temperature Formulation for Atmospheric Flows  (https://arxiv.org/abs/2509.10311)\n\n\n\n\n\n","category":"method"},{"location":"reference/#TrixiAtmo.flux_nonconservative_artiano_etal-Tuple{Any, Any, AbstractVector, CompressibleEulerPotentialTemperatureEquationsWithGravity3D}","page":"Reference","title":"TrixiAtmo.flux_nonconservative_artiano_etal","text":"flux_nonconservative_artiano_etal(u_ll, u_rr,\n\t\t\t\t\t\t\t\t  normal_direction::AbstractVector,\n\t\t\t\t\t\t\t\t  equations::CompressibleEulerPotentialTemperatureEquationsWithGravity3D)\n\nWell-balanced gravity term for constant potential temperature background state by\n\nMarco Artiano, Oswald Knoth, Peter Spichtinger, Hendrik Ranocha (2025)  Structure-Preserving High-Order Methods for the Compressible Euler Equations   in Potential Temperature Formulation for Atmospheric Flows  (https://arxiv.org/abs/2509.10311)\n\n\n\n\n\n","category":"method"},{"location":"reference/#TrixiAtmo.flux_nonconservative_artiano_etal-Tuple{Any, Any, Integer, CompressibleEulerPotentialTemperatureEquationsWithGravity1D}","page":"Reference","title":"TrixiAtmo.flux_nonconservative_artiano_etal","text":"fluxnonconservativeartianoetal(ull, u_rr, orientation::Integer, equations::CompressibleEulerPotentialTemperatureEquationsWithGravity1D)\n\nWell-balanced gravity term for constant potential temperature background state by\n\nMarco Artiano, Oswald Knoth, Peter Spichtinger, Hendrik Ranocha (2025)  Structure-Preserving High-Order Methods for the Compressible Euler Equations   in Potential Temperature Formulation for Atmospheric Flows  (https://arxiv.org/abs/2509.10311)\n\n\n\n\n\n","category":"method"},{"location":"reference/#TrixiAtmo.flux_nonconservative_ec-Tuple{Any, Any, Any, Any, Integer, SplitCovariantShallowWaterEquations2D}","page":"Reference","title":"TrixiAtmo.flux_nonconservative_ec","text":"flux_nonconservative_ec(u_ll, u_rr, aux_vars_ll, aux_vars_rr,\n                        orientation::Integer,\n                        equations::SplitCovariantShallowWaterEquations2D)\n\nNon-symmetric part of an entropy-conservative flux for the shallow water equations in    covariant form, consisting of pressure and bottom topography terms, as well as a    curvature correction term. This can be used for both the volume and surface terms.\n\nwarning: Experimental implementation\nThe use of entropy-stable split-form/flux-differencing formulations for covariant  equations is an experimental feature and may change in future releases.\n\n\n\n\n\n","category":"method"},{"location":"reference/#TrixiAtmo.flux_nonconservative_souza_etal-Tuple{Any, Any, AbstractVector, CompressibleEulerPotentialTemperatureEquationsWithGravity2D}","page":"Reference","title":"TrixiAtmo.flux_nonconservative_souza_etal","text":"flux_nonconservative_souza_etal(u_ll, u_rr, normal_direction::AbstractVector, equations::CompressibleEulerPotentialTemperatureEquationsWithGravity2D)\n\nSouza et al.   The Flux-Differencing Discontinuous {G}alerkin Method Applied to   an Idealized Fully Compressible Nonhydrostatic Dry Atmosphere  DOI: 10.1029/2022MS003527\n\n\n\n\n\n","category":"method"},{"location":"reference/#TrixiAtmo.flux_nonconservative_souza_etal-Tuple{Any, Any, AbstractVector, CompressibleEulerPotentialTemperatureEquationsWithGravity3D}","page":"Reference","title":"TrixiAtmo.flux_nonconservative_souza_etal","text":"flux_nonconservative_souza_etal(u_ll, u_rr, normal_direction::AbstractVector, equations::CompressibleEulerPotentialTemperatureEquationsWithGravity3D)\n\nSouza et al.   The Flux-Differencing Discontinuous {G}alerkin Method Applied to   an Idealized Fully Compressible Nonhydrostatic Dry Atmosphere  DOI: 10.1029/2022MS003527\n\n\n\n\n\n","category":"method"},{"location":"reference/#TrixiAtmo.flux_nonconservative_souza_etal-Tuple{Any, Any, Integer, CompressibleEulerPotentialTemperatureEquationsWithGravity1D}","page":"Reference","title":"TrixiAtmo.flux_nonconservative_souza_etal","text":"fluxnonconservativesouzaetal(ull, u_rr, orientation::Integer, equations::CompressibleEulerPotentialTemperatureEquationsWithGravity1D)\n\nSouza et al.   The Flux-Differencing Discontinuous {G}alerkin Method Applied to   an Idealized Fully Compressible Nonhydrostatic Dry Atmosphere  DOI: 10.1029/2022MS003527\n\n\n\n\n\n","category":"method"},{"location":"reference/#TrixiAtmo.flux_nonconservative_surface_simplified-Tuple{Any, Any, Any, Any, Integer, SplitCovariantShallowWaterEquations2D}","page":"Reference","title":"TrixiAtmo.flux_nonconservative_surface_simplified","text":"flux_nonconservative_surface_simplified(u_ll, u_rr, aux_vars_ll, aux_vars_rr,\n                                        orientation::Integer,\n                                        equations::SplitCovariantShallowWaterEquations2D)\n\nFor bottom topography which is continuous across element interfaces, we can significantly    simplify the nonconservative surface terms, such that only the pressure contribution    remains. In such cases, this flux is equivalent to flux_nonconservative_ec when used as a surface flux, but should not be used as a volume flux.\n\nwarning: Experimental implementation\nThe use of entropy-stable split-form/flux-differencing formulations for covariant  equations is an experimental feature and may change in future releases.\n\n\n\n\n\n","category":"method"},{"location":"reference/#TrixiAtmo.flux_nonconservative_waruzewski_etal-Tuple{Any, Any, AbstractVector, CompressibleEulerPotentialTemperatureEquationsWithGravity2D}","page":"Reference","title":"TrixiAtmo.flux_nonconservative_waruzewski_etal","text":"flux_nonconservative_waruzewski_etal(u_ll, u_rr, normal_direction::AbstractVector, equations::CompressibleEulerPotentialTemperatureEquationsWithGravity2D)\n\nWell-balanced gravity term for isothermal background state\n\nMaciej Waruszewski and Jeremy E. Kozdon and Lucas C. Wilcox and Thomas H. Gibson and Francis X. Giraldo (2022)  Entropy stable discontinuous {G}alerkin methods for balance laws   in non-conservative form: Applications to the {E}uler equations with gravity  DOI: 10.1016/j.jcp.2022.111507\n\nThe well balanced on curvilinear coordinates was proven by\n\nMarco Artiano, Oswald Knoth, Peter Spichtinger, Hendrik Ranocha (2025)  Structure-Preserving High-Order Methods for the Compressible Euler Equations   in Potential Temperature Formulation for Atmospheric Flows  (https://arxiv.org/abs/2509.10311)\n\n\n\n\n\n","category":"method"},{"location":"reference/#TrixiAtmo.flux_nonconservative_waruzewski_etal-Tuple{Any, Any, AbstractVector, CompressibleEulerPotentialTemperatureEquationsWithGravity3D}","page":"Reference","title":"TrixiAtmo.flux_nonconservative_waruzewski_etal","text":"flux_nonconservative_waruzewski_etal(u_ll, u_rr,\n\t\t\t\t\t\t\t\t\t normal_direction::AbstractVector,\n\t\t\t\t\t\t\t\t\t \tequations::CompressibleEulerPotentialTemperatureEquationsWithGravity3D)\n\nWell-balanced gravity term for isothermal background state\n\nMaciej Waruszewski and Jeremy E. Kozdon and Lucas C. Wilcox and Thomas H. Gibson and Francis X. Giraldo (2022),  Entropy stable discontinuous {G}alerkin methods for balance laws   in non-conservative form: Applications to the {E}uler equations with gravity  DOI: 10.1016/j.jcp.2022.111507\n\nThe well balanced on curvilinear coordinates was proven by\n\nMarco Artiano, Oswald Knoth, Peter Spichtinger, Hendrik Ranocha (2025)  Structure-Preserving High-Order Methods for the Compressible Euler Equations   in Potential Temperature Formulation for Atmospheric Flows  (https://arxiv.org/abs/2509.10311)\n\n\n\n\n\n","category":"method"},{"location":"reference/#TrixiAtmo.flux_nonconservative_waruzewski_etal-Tuple{Any, Any, Integer, CompressibleEulerPotentialTemperatureEquationsWithGravity1D}","page":"Reference","title":"TrixiAtmo.flux_nonconservative_waruzewski_etal","text":"fluxnonconservativewaruzewskietal(ull, u_rr, orientation::Integer, equations::CompressibleEulerPotentialTemperatureEquationsWithGravity1D)\n\nWell-balanced gravity term for isothermal background state\n\nMaciej Waruszewski and Jeremy E. Kozdon and Lucas C. Wilcox and Thomas H. Gibson and Francis X. Giraldo (2022),  Entropy stable discontinuous {G}alerkin methods for balance laws   in non-conservative form: Applications to the {E}uler equations with gravity  DOI: 10.1016/j.jcp.2022.111507\n\nThe well balanced on curvilinear coordinates was proven by\n\nMarco Artiano, Oswald Knoth, Peter Spichtinger, Hendrik Ranocha (2025)  Structure-Preserving High-Order Methods for the Compressible Euler Equations   in Potential Temperature Formulation for Atmospheric Flows  (https://arxiv.org/abs/2509.10311)\n\n\n\n\n\n","category":"method"},{"location":"reference/#TrixiAtmo.flux_tec-Tuple{Any, Any, AbstractVector, CompressibleEulerPotentialTemperatureEquations2D}","page":"Reference","title":"TrixiAtmo.flux_tec","text":"flux_tec(u_ll, u_rr, orientation_or_normal_direction, equations::CompressibleEulerEquationsPotentialTemperature2D)\n\nTotal energy conservative two-point flux by\n\nMarco Artiano, Oswald Knoth, Peter Spichtinger, Hendrik Ranocha (2025)  Structure-Preserving High-Order Methods for the Compressible Euler Equations   in Potential Temperature Formulation for Atmospheric Flows  (https://arxiv.org/abs/2509.10311)\n\n\n\n\n\n","category":"method"},{"location":"reference/#TrixiAtmo.flux_tec-Tuple{Any, Any, AbstractVector, CompressibleEulerPotentialTemperatureEquations3D}","page":"Reference","title":"TrixiAtmo.flux_tec","text":"flux_tec(u_ll, u_rr, orientation_or_normal_direction, equations::CompressibleEulerEquationsPotentialTemperature3D)\n\nTotal energy conservative two-point flux by\n\nMarco Artiano, Oswald Knoth, Peter Spichtinger, Hendrik Ranocha (2025)  Structure-Preserving High-Order Methods for the Compressible Euler Equations   in Potential Temperature Formulation for Atmospheric Flows  (https://arxiv.org/abs/2509.10311)\n\n\n\n\n\n","category":"method"},{"location":"reference/#TrixiAtmo.flux_tec-Tuple{Any, Any, AbstractVector, CompressibleEulerPotentialTemperatureEquationsWithGravity2D}","page":"Reference","title":"TrixiAtmo.flux_tec","text":"flux_tec(u_ll, u_rr, orientation_or_normal_direction, equations::CompressibleEulerEquationsPotentialTemperatureWithGravity2D)\n\nTotal energy conservative two-point flux by\n\nMarco Artiano, Oswald Knoth, Peter Spichtinger, Hendrik Ranocha (2025)  Structure-Preserving High-Order Methods for the Compressible Euler Equations   in Potential Temperature Formulation for Atmospheric Flows  (https://arxiv.org/abs/2509.10311)\n\n\n\n\n\n","category":"method"},{"location":"reference/#TrixiAtmo.flux_tec-Tuple{Any, Any, AbstractVector, CompressibleEulerPotentialTemperatureEquationsWithGravity3D}","page":"Reference","title":"TrixiAtmo.flux_tec","text":"flux_tec(u_ll, u_rr, orientation_or_normal_direction, equations::CompressibleEulerEquationsPotentialTemperatureWithGravity3D)\n\nTotal energy conservative two-point flux by\n\nMarco Artiano, Oswald Knoth, Peter Spichtinger, Hendrik Ranocha (2025)  Structure-Preserving High-Order Methods for the Compressible Euler Equations   in Potential Temperature Formulation for Atmospheric Flows  (https://arxiv.org/abs/2509.10311)\n\n\n\n\n\n","category":"method"},{"location":"reference/#TrixiAtmo.flux_tec-Tuple{Any, Any, Integer, CompressibleEulerPotentialTemperatureEquations1D}","page":"Reference","title":"TrixiAtmo.flux_tec","text":"flux_tec(u_ll, u_rr, orientation_or_normal_direction, equations::CompressibleEulerEquationsPotentialTemperature1D)\n\nTotal energy conservative two-point flux by\n\nMarco Artiano, Oswald Knoth, Peter Spichtinger, Hendrik Ranocha (2025)  Structure-Preserving High-Order Methods for the Compressible Euler Equations   in Potential Temperature Formulation for Atmospheric Flows  (https://arxiv.org/abs/2509.10311)\n\n\n\n\n\n","category":"method"},{"location":"reference/#TrixiAtmo.flux_tec-Tuple{Any, Any, Integer, CompressibleEulerPotentialTemperatureEquationsWithGravity1D}","page":"Reference","title":"TrixiAtmo.flux_tec","text":"flux_tec(u_ll, u_rr, orientation_or_normal_direction, equations::CompressibleEulerEquationsPotentialTemperature1D)\n\nTotal energy conservative two-point flux by\n\nMarco Artiano, Oswald Knoth, Peter Spichtinger, Hendrik Ranocha (2025)  Structure-Preserving High-Order Methods for the Compressible Euler Equations   in Potential Temperature Formulation for Atmospheric Flows  (https://arxiv.org/abs/2509.10311)\n\n\n\n\n\n","category":"method"},{"location":"reference/#TrixiAtmo.global2contravariant","page":"Reference","title":"TrixiAtmo.global2contravariant","text":"global2contravariant(u, aux_vars, equations)\n\nTransform the vector u of solution variables with momentum or velocity components given with respect to the global coordinate system into local contravariant components. The  global coordinate system is specified by the GlobalCoordinateSystem type parameter in  AbstractCovariantEquations. u is a vector type of the correct length  nvariables(equations). Notice the function doesn't include any error checks for the  purpose of efficiency, so please make sure your input is correct. The inverse conversion is  performed by contravariant2global.\n\n\n\n\n\n","category":"function"},{"location":"reference/#TrixiAtmo.have_aux_node_vars-Tuple{Trixi.AbstractEquations}","page":"Reference","title":"TrixiAtmo.have_aux_node_vars","text":"have_aux_node_vars(equations)\n\nTrait function determining whether equations requires the use of auxiliary variables. Classical conservation laws such as the CompressibleEulerEquations2D do not  require auxiliary variables. The return value will be True() or False() to allow  dispatching on the return type.\n\n\n\n\n\n","category":"method"},{"location":"reference/#TrixiAtmo.initial_condition_barotropic_instability-Tuple{Any, Any, Any}","page":"Reference","title":"TrixiAtmo.initial_condition_barotropic_instability","text":"initial_condition_barotropic_instability(x, t, equations)\n\nBarotrotropic instability initiated by a perturbation applied to a mid-latitude jet. The  velocity field is a purely zonal flow, given as a function of the latitude theta as\n\nv_lambda(theta) = begincases\nu_0 exp(-4  (theta_1 - theta_0)^-2)exp((theta - theta_0)^-1\n(theta - theta_1)^-1)  quad theta_0  theta  theta_1 \n0  quad textotherwise\nendcases\n\nwhere u_0 = 80  mathrmmmathrms, theta_0 = pi7, and  theta_1 = pi2 - theta_0. The background geopotential height field is given by \n\nh_0(theta) = 10158  mathrmm - \nfracag int_-pi2^theta v_lambda(theta)big(2Omegasintheta + \nv_lambda(theta)tantheta  a big) mathrmdtheta\n\nwhere a = 637122 times 10^3 mathrmm is the Earth's radius,  g = 980616  mathrmmmathrms^2 is the Earth's gravitational acceleration, and Omega = 7292 times 10^-5 mathrms^-1 is the Earth's rotation rate. The  perturbation is then added to obtain the following geopotential height field:\n\nh(lambda theta) = begincases\nh_0(theta) + delta h costheta exp(-(lambdaalpha)^2) \nexp(-((theta_2 -theta)beta)^2)  quad -pi  lambda  pi\nh_0(theta)  quad textotherwise\nendcases\n\nwhere lambda is the longitude coordinate, and we take alpha = 13, beta = 115,  and delta h = 120  mathrmm. This problem was proposed in the following paper:\n\nJ. Galewsky, R. K. Scott, and L. M. Polvani (2004). An initial-value problem for testing numerical models of the global shallow-water equations. Tellus A 56.5:429–440. DOI: 10.3402/tellusa.v56i5.14436\n\n\n\n\n\n","category":"method"},{"location":"reference/#TrixiAtmo.initial_condition_gaussian-Tuple{Any, Any, Any}","page":"Reference","title":"TrixiAtmo.initial_condition_gaussian","text":"initial_condition_gaussian(x, t, equations)\n\nThis Gaussian bell case is a smooth initial condition suitable for testing the convergence  of discretizations of the linear advection equation on a spherical domain of radius a = 6 37122 times 10^3 mathrmm, representing the surface of the Earth. Denoting the  Euclidean norm as lVert cdot rVert, the initial height field is prescribed as a  function of the position vecx relative to the centre of the Earth by\n\nh(vecx) = h_0 exp\nBig(-b_0 big(lVert vecx - vecx_0 rVert  lVert vecx rVertbig)^2 Big)\n\nwhere h_0 = 1 times 10^3 mathrmm is the height of the bell, b_0 = 5 is the  width parameter, and vecx_0 is the position of the centre of the bell, which is  initialized at a longitude of 3pi2 and a latitude of zero. The velocity field  corresponds to a solid body rotation with a period of 12 days at an angle of  alpha = pi4 from the polar axis. Denoting vecomega as the corresponding angular velocity vector, the velocity is therefore initialized as\n\nvecv(vecx) = vecomega times vecx\n\nThis problem is adapted from Case 1 of the test suite described in the following paper:\n\nD. L. Williamson, J. B. Drake, J. J. Hack, R. Jakob, and P. N. Swarztrauber (1992). A   standard test set for numerical approximations to the shallow water equations in spherical geometry. Journal of Computational Physics, 102(1):211-224.  DOI: 10.1016/S0021-9991(05)80016-6\n\n\n\n\n\n","category":"method"},{"location":"reference/#TrixiAtmo.initial_condition_geostrophic_balance-Tuple{Any, Any, Any}","page":"Reference","title":"TrixiAtmo.initial_condition_geostrophic_balance","text":"initial_condition_geostrophic_balance(x, t, equations)\n\nSteady geostrophic balance for the spherical shallow water equations, corresponding to a  purely zonal velocity field given as a function of the latitude theta by  v_lambda(theta) = v_0 costheta, where we define v_0 = 2pi a  (12  mathrmdays)  in terms of the Earth's radius a = 637122 times 10^3 mathrmm. The height field  then varies with the latitude as\n\nh(theta) = frac1g \nBig(gh_0 - Big(a Omega v_0 + frac12 v_0^2Big)sin^2thetaBig)\n\nwhere gh_0 = 294 times 10^4  mathrmm^2mathrms^2,  g = 980616  mathrmmmathrms^2, and  Omega = 7292 times 10^-5 mathrms^-1. This problem corresponds to Case 2 of the test suite described in the following paper:\n\nD. L. Williamson, J. B. Drake, J. J. Hack, R. Jakob, and P. N. Swarztrauber (1992). A   standard test set for numerical approximations to the shallow water equations in spherical geometry. Journal of Computational Physics, 102(1):211-224.  DOI: 10.1016/S0021-9991(05)80016-6\n\n\n\n\n\n","category":"method"},{"location":"reference/#TrixiAtmo.initial_condition_isolated_mountain-Tuple{Any, Any, Any}","page":"Reference","title":"TrixiAtmo.initial_condition_isolated_mountain","text":"initial_condition_isolated_mountain(x, t, equations)\n\nZonal flow over an isolated mountain with a profile given in terms of the latitude  lambda and longitude theta as \n\nh_s(lambdatheta) =\nh_s0 (1 - sqrtmin(R^2 (lambda-lambda_0)^2 + (theta-theta_0)^2)R)\n\nwhere h_s0 = 2000  textm, lambda_0 = -pi2, theta_0 = pi6, and R =pi9.  The initial velocity field is given by v_lambda(theta) = v_0 costheta, where  v_0 = 20  mathrmms, and the total geopotential height H = h+h_s is given by \n\nH(theta) = H_0 - frac1gBig(a Omega v_0 + frac12 v_0^2Big)sin^2theta\n\nwhere H_0 = 5960  mathrmm, g = 980616  mathrmmmathrms^2, and  Omega = 7292 times 10^-5 mathrms^-1. To use this test case with  SplitCovariantShallowWaterEquations2D, the keyword argument  auxiliary_field = bottom_topography_isolated_mountain should be passed into the  SemidiscretizationHyperbolic constructor. This problem corresponds to Case 5 of the test suite described in the following paper:\n\nD. L. Williamson, J. B. Drake, J. J. Hack, R. Jakob, and P. N. Swarztrauber (1992). A   standard test set for numerical approximations to the shallow water equations in spherical geometry. Journal of Computational Physics, 102(1):211-224.  DOI: 10.1016/S0021-9991(05)80016-6\n\n\n\n\n\n","category":"method"},{"location":"reference/#TrixiAtmo.initial_condition_rossby_haurwitz-Tuple{Any, Any, Any}","page":"Reference","title":"TrixiAtmo.initial_condition_rossby_haurwitz","text":"initial_condition_rossby_haurwitz(x, t, equations)\n\nRossby-Haurwitz wave case for the spherical shallow water equations, where the zonal and  meridional velocity components are given, respectively, as functions of the longitude  lambda and latitude theta by\n\nbeginaligned\nv_lambda(lambdatheta) = a omega cos theta+a K cos ^R-1 theta\nleft(R sin ^2 theta-cos ^2 thetaright) cos (R lambda)\nv_theta(lambdatheta) = -a K R cos ^R-1 theta sin theta sin (R lambda)\nendaligned\n\nwhere omega = K = 7848 times 10^-6  mathrms^-1 and R = 4 are given  constants, and a = 637122 times 10^3 mathrmm is the Earth's radius. Taking  g = 980616  mathrmmmathrms^2, Omega = 7292 times 10^-5  mathrms^-1,  and h_0 = 8000  mathrmm and defining the functions \n\nbeginaligned\nA(theta) = fracomega2(2 Omega+omega) cos^2 theta + \nfrac14 K^2 cos^2 R thetaBig((R+1) cos^2theta +left(2 R^2-R-2right) - \nbig(2 R^2  cos^2 thetabig) Big) \nB(theta) = frac2(Omega+omega) K(R+1)(R+2) cos ^R thetabig((R^2+2 R+2) - \n(R+1)^2 cos^2 thetabig) \nC(theta) =  frac14 K^2 cos^2 R thetabig((R+1) cos^2 theta-(R+2)big)\nendaligned\n\nthe initial height field is given by\n\nh(lambdatheta) = h_0 + \nfraca^2gBig(A(theta) + B(theta)cos(Rlambda) + C(theta)cos(2Rlambda) Big)\n\nThis problem corresponds to Case 6 of the test suite described in the following paper:\n\nD. L. Williamson, J. B. Drake, J. J. Hack, R. Jakob, and P. N. Swarztrauber (1992). A   standard test set for numerical approximations to the shallow water equations in spherical geometry. Journal of Computational Physics, 102(1):211-224.  DOI: 10.1016/S0021-9991(05)80016-6\n\n\n\n\n\n","category":"method"},{"location":"reference/#TrixiAtmo.initial_condition_unsteady_solid_body_rotation-Tuple{Any, Any, Any}","page":"Reference","title":"TrixiAtmo.initial_condition_unsteady_solid_body_rotation","text":"initial_condition_unsteady_solid_body_rotation(x, t, equations)\n\nUnsteady analytical solution to the spherical shallow water equations, corresponding to a solid body rotation with a prescribed bottom topography. Assuming the domain to be a sphere  of radius a = 637122 times 10^3 mathrmm, letting vecx denote the position  relative to the centre of the Earth, and letting vece_x, vece_y, and vece_z  denote the Cartesian basis vectors, we define the rotating frame \n\nvecb_x(t) = cos(Omega t)vece_x + sin(Omega t)vece_y quad\nvecb_y(t) = -sin(Omega t)vece_x + cos(Omega t)vece_y quad \nvecb_z(t) = vece_z\n\nas a function of time t. We also define the associated coordinate transformation \n\nvecvarphi(vecxt) = \n(vecx cdot vecb_x(t)) vece_x + (vecx cdot vecb_y(t)) vece_y + \n(vecx cdot vecb_z(t)) vece_z\n\nas well as a fixed axis vecc = -sin(alpha)vece_x + cos(alpha)vece_y, where  Omega = 7292 times 10^-5 mathrms^-1 is the Earth's rotation rate, and we take  alpha = pi4. For a bottom topography prescribed as\n\nh_s(vecx) = frac12g(vecOmega cdot vecx)^2\n\nwhere vecOmega = Omegavece_z and g = 980616  mathrmmmathrms^2 are the  Earth's axis of rotation and gravitational acceleration, respectively, the time-dependent  velocity field is given as \n\nvecv(vecxt) = v_0 vecvarphi(vecct) times vecxlVert vecx rVert\n\nand the total geopotential height H = h+b is given by \n\nH(vecxt) = \nfrac12gleft(big(v_0 vecOmegacdot vecx - \nvecvarphi(vecct) cdot vecxlVert vecx rVert big)^2 +\n(vecOmega cdot vecx)^2 + 2k_1right)\n\nwhere v_0 = 2pi a  (12  mathrmdays), k_1 = 133681  mathrmm^2mathrms^2, and lVert cdot rVert denotes the Euclidean norm. To use this test case with SplitCovariantShallowWaterEquations2D, the keyword argument auxiliary_field = bottom_topography_unsteady_solid_body_rotation should be passed into the SemidiscretizationHyperbolic constructor. This analytical solution was derived in the following paper:\n\nM. Läuter, D. Handorf, and K. Dethloff (2005). Unsteady analytical solutions of the  spherical shallow water equations. Journal of Computational Physics 210:535–553. DOI: 10.1016/j.jcp.2005.04.022\n\n\n\n\n\n","category":"method"},{"location":"reference/#TrixiAtmo.source_terms_coriolis-Tuple{Any, Any, Any, Any, ShallowWaterEquations3D, Any}","page":"Reference","title":"TrixiAtmo.source_terms_coriolis","text":"source_terms_coriolis(u, du, x, t, \n                      equations::ShallowWaterEquations3D,\n                      normal_direction)\n\nSource term function to apply the Coriolis force with an angular velocity of equations.rotation_rate around the z axis.\n\nThe vector normal_direction is perpendicular to the 2D manifold. By default,  it is the normal contravariant basis vector.\n\n\n\n\n\n","category":"method"},{"location":"reference/#TrixiAtmo.source_terms_coriolis_lagrange_multiplier-Tuple{Any, Any, Any, Any, ShallowWaterEquations3D, Any}","page":"Reference","title":"TrixiAtmo.source_terms_coriolis_lagrange_multiplier","text":"source_terms_coriolis_lagrange_multiplier(u, du, x, t,\n                                          equations::ShallowWaterEquations3D,\n                                          normal_direction)\n\nComputes the Coriolis source term (source_terms_coriolis) and the Lagrange multiplier source term (source_terms_lagrange_multiplier).\n\n\n\n\n\n","category":"method"},{"location":"reference/#TrixiAtmo.source_terms_lagrange_multiplier-Tuple{Any, Any, Any, Any, ShallowWaterEquations3D, Any}","page":"Reference","title":"TrixiAtmo.source_terms_lagrange_multiplier","text":"source_terms_lagrange_multiplier(u, du, x, t,\n                                 equations::ShallowWaterEquations3D,\n                                 normal_direction)\n\nSource term function to apply a Lagrange multiplier to the semi-discretization in order to constrain the momentum to a 2D manifold.\n\nThe vector normal_direction is perpendicular to the 2D manifold. By default,  it is the normal contravariant basis vector.\n\n\n\n\n\n","category":"method"},{"location":"reference/#TrixiAtmo.transform_initial_condition-Tuple{Any, TrixiAtmo.AbstractCovariantEquations}","page":"Reference","title":"TrixiAtmo.transform_initial_condition","text":"transform_initial_condition(initial_condition, equations)\n\nTakes in a function with the signature initial_condition(x, t, equations) which returns  an initial condition given in terms of global Cartesian or zonal/meridional velocity components, and returns another function initial_condition_transformed(x, t, equations)  or initial_condition_transformed(x, t, aux_vars, equations) which returns the same  initial data, but transformed to the appropriate prognostic variables used internally by  the solver. For the covariant form, this involves a transformation of the global velocity  components to contravariant components using global2contravariant as well as a  conversion from primitive to conservative variables. For standard Cartesian formulations,  this simply involves a conversion from  primitive to conservative variables. The intention  here is to have a set of test cases (for example, initial_condition_gaussian) for  which the initial condition is prescribed using a standardized set of primitive variables  in a global coordinate system, and transformed to the specific prognostic variables  required for a given model.\n\nnote: Note\nWhen using the covariant formulation, the initial velocity components should be defined  in the coordinate system specified by the GlobalCoordinateSystem type parameter in AbstractCovariantEquations.\n\n\n\n\n\n","category":"method"},{"location":"#TrixiAtmo.jl","page":"Home","title":"🌎 TrixiAtmo.jl 🌍","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"(Image: Docs-dev) (Image: Slack) (Image: Build Status) (Image: Codecov) (Image: Coveralls) (Image: License: MIT)","category":"page"},{"location":"","page":"Home","title":"Home","text":"<p align=\"center\">\n  <img width=\"60%\" src=\"https://trixi-framework.github.io/assets/logo_atmo.png\">\n</p>","category":"page"},{"location":"","page":"Home","title":"Home","text":"Note: This repository is still in its alpha stage and anything might change at any time and without warning.","category":"page"},{"location":"","page":"Home","title":"Home","text":"TrixiAtmo.jl is a numerical simulation package focused on atmospheric flows. It builds upon Trixi.jl, a generic flow solver for conservation laws, implementing discontinuous Galerkin methods and written in Julia.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Currently available features include:","category":"page"},{"location":"","page":"Home","title":"Home","text":"Compressible Euler and shallow water models on cubed sphere meshes, discretizing the atmosphere or its two-dimensional surface\nMoist compressible Euler equations, including cloud and rain microphysics\nFlux-differencing formulations, including entropy-stable schemes","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"If you have not yet installed Julia, please follow the instructions for your operating system. TrixiAtmo.jl works with Julia v1.10 and newer. We recommend using the latest stable release of Julia.","category":"page"},{"location":"","page":"Home","title":"Home","text":"TrixiAtmo.jl is not a registered Julia package yet, and therefore needs to be downloaded manually and then run from within the cloned directory:","category":"page"},{"location":"","page":"Home","title":"Home","text":"git clone https://github.com/trixi-framework/TrixiAtmo.jl.git\njulia --project=@.","category":"page"},{"location":"","page":"Home","title":"Home","text":"In addition, TrixiAtmo.jl requires the numerical solver framework Trixi.jl, relevant sub-packages of OrdinaryDiffEq.jl for time integration, and Plots.jl for visualization, which can be installed by executing the following in the Julia REPL:","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> using Pkg\n\njulia> Pkg.add([\"Trixi\", \"Trixi2Vtk\", \"OrdinaryDiffEqLowStorageRK\", \"OrdinaryDiffEqSSPRK\", \"Plots\"])","category":"page"},{"location":"#Usage","page":"Home","title":"Usage","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"In the Julia REPL, first load the package Trixi.jl","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> using Trixi","category":"page"},{"location":"","page":"Home","title":"Home","text":"Then start a simulation by executing","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> trixi_include(\"examples/elixir_euler_warmbubble.jl\")","category":"page"},{"location":"","page":"Home","title":"Home","text":"Please see our documentation for more advanced setups.","category":"page"},{"location":"#Authors","page":"Home","title":"Authors","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"TrixiAtmo.jl is maintained by the Trixi authors. It was initiated by Andrés Rueda-Ramírez (Polytechnic University of Madrid (UPM), Spain), Benedict Geihe, and Tristan Montoya (University of Cologne, Germany).","category":"page"},{"location":"#License-and-contributing","page":"Home","title":"License and contributing","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"TrixiAtmo.jl is licensed under the MIT license (see License). Since TrixiAtmo.jl is an open-source project, we are very happy to accept contributions from the community. To get in touch with the developers, join us on Slack or create an issue.","category":"page"},{"location":"#Acknowledgments","page":"Home","title":"Acknowledgments","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"<p align=\"center\">\n  \n  <img width=\"300px\" src=\"https://user-images.githubusercontent.com/3637659/231436391-b28a76a4-f027-40f9-bd28-14e3a2f3e16a.png\"/>\n</p>","category":"page"},{"location":"","page":"Home","title":"Home","text":"This project has benefited from funding from the  Federal Ministry of Education and Research (BMBF)  through the following grants:","category":"page"},{"location":"","page":"Home","title":"Home","text":"Project grant \"Adaptive earth system modeling with significantly reduced computation time for exascale supercomputers (ADAPTEX)\" (funding id: 16ME0668K)\nProject grant \"ICON-DG\" of the WarmWorld initiative (funding id: 01LK2315B)","category":"page"}]
}
